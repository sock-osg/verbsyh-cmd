#!/usr/bin/python

import json
from pprint import pprint
import os.path
from os.path import expanduser
import sys
import getopt

hits = 0
errors = 0

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    RED = '\033[31m'
    UNDERLINE = '\033[4m'

def printTestVerb(verbRaw):
    print "**************************************"
    print "Entries for << " + bcolors.OKBLUE + verbRaw["baseTranslation"] + bcolors.ENDC + " >>"
    getAndValidateEntry(verbRaw["baseWord"], "Base Verb")
    getAndValidateEntry(verbRaw["simplePast"], "Simple Past")
    getAndValidateEntry(verbRaw["pastParticiple"], "Past Participle")
    printFullEntry(verbRaw)

def getAndValidateEntry(verbRaw, timeVerb):
    global errors
    global hits
    counter = 0
    while counter < 2:
        entry = raw_input(timeVerb + " [-e for an example of use]: ")
        while True:
            if entry == '-e':
                currentVerb = verbRaw["word"]
                print "Example: " + verbRaw["example"].replace(currentVerb, currentVerb[:1] + "___" + currentVerb[-1:])
                entry = raw_input(timeVerb + " [-e for an example of use]: ")
            elif entry == '-s':
                counter = 100
                errors += 1
                break;
            elif entry == '-E':
                showResult()
                print "Good bye"
                sys.exit()
            else:
                if validateEntry(entry, verbRaw["word"]):
                    hits += 1
                    counter = 1000
                else:
                    counter += 1
                    if counter == 2:
                        errors += 1

                break

def validateEntry(userEntry, verb):
    result = userEntry == verb
    if result:
        print bcolors.OKGREEN + "Good" + bcolors.ENDC
    else:
        print bcolors.FAIL + "You are wrong!" + bcolors.ENDC
    return result;

def printFullEntry(verb):
    print bcolors.WARNING + "[[[ " + verb["baseWord"]["word"] + "  =>  " + verb["simplePast"]["word"] + "  =>  " + verb["pastParticiple"]["word"] + " ]]]" + bcolors.ENDC

def loadJson():
    verbs_file_path = expanduser('~') + '/.verbsyh/user-verbs.json'

    if not os.path.isfile(verbs_file_path):
        print "Using default DB of verbs"
        verbs_file_path = 'user-verbs.json'

    with open(verbs_file_path) as data_file:
        data = json.load(data_file)

    return data

def testVerbs():
    data = loadJson()

    for verb in data['verbs']:
        printTestVerb(verb)

    showResult()

def showResult():
    print "Hits : " + bcolors.OKGREEN + str(hits) + bcolors.ENDC
    print "Errors : " + bcolors.RED + str(errors) + bcolors.ENDC

def showAllEquals():
    data = loadJson()
    for verb in data['verbs']:
        baseVerb = verb["baseWord"]
        pastSimple = verb["simplePast"]["word"]
        pastParticiple = verb["pastParticiple"]["word"]

        if baseVerb == pastSimple and pastSimple == pastParticiple:
            print bcolors.WARNING + "[[[ " + baseVerb + "  =>  " + pastSimple + "  =>  " + pastParticiple + " ]]]" + bcolors.ENDC

def testMeaning():
    data = loadJson()
    for verb in data['verbs']:
        print "**************************************"
        printFullEntry(verb)
        entry = raw_input("Write the meaning (in Spanish) : ")
        validateEntry(entry, verb['baseTranslation'])

def printUsage():
    print "verbsyh-cmd <options>"
    print "Options: "
    print "  -h     Show the usage."
    print "  -m     Mode of operation. This are the options [test, equals, meaning]"

def main(argv):
    try:
        opts, args = getopt.getopt(argv, "hm:", ["mmode="])
    except:
        print "Error"
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h':
            printUsage()
            sys.exit()
        elif opt in ("-m", "--mmode"):
            mode = arg
            if mode == 'test':
                testVerbs()
            elif mode == 'equals':
                showAllEquals()
            elif mode == 'meaning':
                testMeaning()
        else:
            print "Error"
            printUsage()
            sys.exit()

main(sys.argv[1:])
